<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Markdown Previewer</title>
  <!-- Include Bootstrap for basic styling -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Custom styles for the Markdown Previewer */
    body {
      font-family: Arial, sans-serif;
      background-color: #f8f9fa;
      margin: 0;
      padding: 0;
    }
    #editor {
      font-family: monospace;
      background-color: #e9ecef;
      border: 1px solid #ced4da;
      border-radius: 5px;
    }
    #preview {
      background-color: #fff;
      border: 1px solid #ced4da;
      border-radius: 5px;
      overflow-y: auto;
      max-height: 500px;
    }
    h1, h2 {
      font-weight: bold;
    }
  </style>
</head>
<body>
  <div id="root"></div>

  <!-- Include React, ReactDOM, Redux, and jQuery libraries -->
  <script src="https://cdn.jsdelivr.net/npm/react@18/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/redux@4.2.1/dist/redux.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-redux@8.0.5/dist/react-redux.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.4/dist/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

  <script>
    // REDUX: Define initial state and reducer
    const initialState = { markdown: `# Heading 1\n\n## Subheading\n\n[FreeCodeCamp](https://www.freecodecamp.org)\n\n\`Inline Code\`\n\n\`\`\`\nCode Block\n\`\`\`\n\n- List Item 1\n- List Item 2\n\n> Blockquote\n\n![Image](https://via.placeholder.com/150)\n\n**Bold Text**\n` };

    function markdownReducer(state = initialState, action) {
      switch (action.type) {
        case 'UPDATE_MARKDOWN':
          return { ...state, markdown: action.payload };
        default:
          return state;
      }
    }

    const store = Redux.createStore(markdownReducer);

    // REACT COMPONENTS
    function Editor() {
      const markdown = ReactRedux.useSelector((state) => state.markdown);
      const dispatch = ReactRedux.useDispatch();

      const handleChange = (e) => {
        dispatch({ type: 'UPDATE_MARKDOWN', payload: e.target.value });
      };

      return (
        <textarea
          id="editor"
          className="form-control"
          rows="20"
          value={markdown}
          onChange={handleChange}
        ></textarea>
      );
    }

    function Preview() {
      const markdown = ReactRedux.useSelector((state) => state.markdown);

      const renderMarkdown = () => {
        return { __html: marked(markdown, { breaks: true }) };
      };

      return (
        <div
          id="preview"
          className="border p-3"
          dangerouslySetInnerHTML={renderMarkdown()}
        ></div>
      );
    }

    function App() {
      return (
        <div className="container">
          <h1 className="text-center my-4">Markdown Previewer</h1>
          <div className="row">
            <div className="col-md-6">
              <h2>Editor</h2>
              <Editor />
            </div>
            <div className="col-md-6">
              <h2>Preview</h2>
              <Preview />
            </div>
          </div>
        </div>
      );
    }

    // RENDER APP
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(
      <ReactRedux.Provider store={store}>
        <App />
      </ReactRedux.Provider>
    );

    // JQUERY: Example jQuery usage
    $(document).ready(function () {
      console.log('jQuery is ready!');
    });
  </script>
</body>
</html>
